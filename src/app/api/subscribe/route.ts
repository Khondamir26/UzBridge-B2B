import { NextResponse } from "next/server";
import connectNewsletterDB from "@/lib/mongodb-newsletter";
import mongoose, { Connection } from "mongoose";

export async function POST(req: Request) {
  try {
    const { email } = await req.json();

    if (!email || !email.includes("@")) {
      return NextResponse.json({ message: "Invalid email" }, { status: 400 });
    }

    const db: Connection = await connectNewsletterDB(); // ‚¨ÖÔ∏è —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–æ

    // ‚¨áÔ∏è —Å—Ö–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
    const SubscriberSchema = new mongoose.Schema({
      email: { type: String, required: true, unique: true },
      createdAt: { type: Date, default: Date.now },
    });

    // ‚¨áÔ∏è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ db
    const Subscriber =
      db.models.Subscriber || db.model("Subscriber", SubscriberSchema);

    const existing = await Subscriber.findOne({ email });
    if (existing) {
      return NextResponse.json({ message: "Email already subscribed" }, { status: 409 });
    }

    await Subscriber.create({ email });
    return NextResponse.json({ message: "Successfully subscribed!" }, { status: 200 });

  } catch (error: any) {
    console.error("üî• Server error:", error.message);
    return NextResponse.json({ message: "Server error: " + error.message }, { status: 500 });
  }
}
